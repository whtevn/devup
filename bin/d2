#!/usr/bin/env node
const minimist = require('minimist');
const fs = require('fs');
import { Map, List } from 'immutable';
import * as devup from '../lib/devup'
var prompt = require('prompt');
prompt.message = "";
prompt.delimiter = "";

const args = minimist(process.argv.slice(2));

const files = List(JSON.parse(fs.readFileSync('./.devup')));

const bump_type = args.t || args.type || "patch";

/*
const files = List([
  { location: "package.json",
    extension: "json",
    search: ["version"]
  },
  { location: "config.xml",
    extension: "xml",
    search: ["result", "widget", "$", "version"]
  }
]);
*/
const file_locations = files.map(file => file.location);

devup.ensure_consistency(undefined, ...files);

let message;
let next_version;

devup.ensure_branch("master")
  .then(() => get_tag_message(next_version))
  .then((user_response) => message = user_response)
  .then(() => next_version = devup.bump_version(bump_type, ...files))
  .then(() => ask_question("would you like to commit these changes locally?", "yes"))
  .then((response) => {
    if(!response){
      console.log("version numbers have been updated locally. changes have not been committed");
      process.exit(0);
    }
  })
  .then(() => devup.commit_to_git(`bumping version numbers to ${next_version} - ${message}`, ...file_locations))
  .then(() => devup.add_tag_to_git(next_version, message))
  .then(() => ask_question("would you like to push your changes to origin?", "yes"))
  .then((response) => {
    if(!response){
      console.log("your local branch has been updated and a tag has been created, but they have not been pushed to origin");
      process.exit(0);
    }
  })
  .then(() => devup.push_to_git(next_version, message))
  .catch((err) => {
    console.log(err)
    process.exit(1)
  })
  ;

function ask_question(question, default_question){
  var msg = `\n${question}`;
  return new Promise((resolve, reject) => {
    prompt.start()
    prompt.get([{properties: {push: {
      message: msg.cyan,
      validator: /y[es]*|n[o]?/i,
      warning: 'Must respond yes or no',
      default: default_question
    }}}], function(err, result){
      if(err) throw new Error(err);
      resolve(result.push.match(/y[es]?/i));
    })
  })
}

function get_tag_message(){
  return new Promise((resolve, reject) => {
    var msg = 'what change is being made?';
    prompt.start()
    prompt.get([{properties: {tag: {message: msg.cyan}}}], function(err, result){
      if(!err && result && result.tag){
        resolve(result.tag);
      }else{
        reject(err || "Blank tags are not allowed. No changes were made");
      }
    })
  })

}
